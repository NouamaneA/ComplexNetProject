# -*- coding: utf-8 -*-
"""projet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i7bR4txgXPLgjtBzMIlLP8fPXthv5Qxx

<h1 align='center'>Projet RÃ©seaux Complexes NET4103</h1>
<div align='center'>Nouamane ARHACHOUI</div>

---
"""

from google.colab import drive
drive.mount("/content/drive")

import matplotlib.pyplot as plt
import numpy as np
import networkx as nx
import collections

G_caltech = nx.read_graphml('/content/drive/MyDrive/Cours/complexnet/projet/fb100/Caltech36.graphml')

G_mit = nx.read_graphml('/content/drive/MyDrive/Cours/complexnet/projet/fb100/MIT8.graphml')

G_hopkins = nx.read_graphml('/content/drive/MyDrive/Cours/complexnet/projet/fb100/Johns Hopkins55.graphml')

nx.draw(G_caltech, node_size=150)
plt.title('Caltech Graph')

nx.draw(G_mit, node_size=150)
plt.title('MIT Graph')

nx.draw(G_hopkins, node_size=150)
plt.title('Johns Hopkins')

def plot_degree_dist(G):
  degrees = [G.degree(n) for n in G.nodes()]
  plt.hist(degrees)
  plt.show()

plt.title('Caltech graph degree distribution')
plot_degree_dist(G_caltech)

plt.title('MIT graph degree distribution')
plot_degree_dist(G_mit)

plt.title('Johns Hopkins graph degree distribution')
plot_degree_dist(G_hopkins)

gcc_caltech = nx.transitivity(G_caltech)
gcc_mit = nx.transitivity(G_mit)
gcc_hopkins = nx.transitivity(G_hopkins)

print('GCC Caltech =', gcc_caltech)
print('GCC MIT =', gcc_mit)
print('GCC Johns Hopkins =', gcc_hopkins)

density_caltech = nx.density(G_caltech)
density_mit = nx.density(G_mit)
density_hopkins = nx.density(G_hopkins)

print('Density Caltech =', density_caltech)
print('Density MIT =', density_mit)
print('Density Johns Hopkins =', density_hopkins)

gccs = [gcc_caltech, gcc_mit, gcc_hopkins]
densities = [density_caltech, density_mit, density_hopkins]

cc_caltech = list(nx.connected_components(G_caltech))
G_lcc_caltech = nx.subgraph(G_caltech, cc_caltech[0])
degree_caltech = dict(G_lcc_caltech.degree())
clustering_caltech = dict(nx.clustering(G_lcc_caltech))

cc_mit = list(nx.connected_components(G_mit))
G_lcc_mit = nx.subgraph(G_mit, cc_mit[0])
degree_mit = dict(G_lcc_mit.degree())
clustering_mit = dict(nx.clustering(G_lcc_mit))

cc_hopkins = list(nx.connected_components(G_hopkins))
G_lcc_hopkins = nx.subgraph(G_hopkins, cc_hopkins[0])
degree_hopkins = dict(G_lcc_hopkins.degree())
clustering_hopkins = dict(nx.clustering(G_lcc_hopkins))

np.mean(list(clustering_caltech.values()))

nx.average_clustering(G_lcc_caltech)

nx.transitivity(G_lcc_caltech)

np.mean(list(clustering_mit.values()))

nx.average_clustering(G_lcc_mit)

nx.transitivity(G_lcc_mit)

np.mean(list(clustering_hopkins.values()))

nx.average_clustering(G_lcc_hopkins)

nx.transitivity(G_lcc_hopkins)

"""### Caltech:
*   Mean local clustering coefficient = 0.409
*   Global clustering coefficient = 0.291
*   Density = 0.056

### MIT:
*   Mean local clustering coefficient = 0.272
*   Global clustering coefficient = 0.180
*   Density = 0.012

### Johns Hopkins:
*   Mean local clustering coefficient = 0.269
*   Global clustering coefficient = 0.193
*   Density = 0.014

"""

plt.scatter(list(degree_caltech.values()), list(clustering_caltech.values()), s= 1, color= 'red')
plt.title('Caltech Graph')
plt.xlabel('Degrees')
plt.ylabel('Clustering Coefficients')
plt.show()

plt.scatter(list(degree_mit.values()), list(clustering_mit.values()), s= 1, color= 'orange')
plt.title('MIT Graph')
plt.show()

plt.scatter(list(degree_hopkins.values()), list(clustering_hopkins.values()), s= 1, color= 'green')
plt.title('Johns Hopkins Graph')
plt.show()

import glob
list_of_files = glob.glob("/content/drive/MyDrive/Cours/complexnet/projet/fb100/*")

l_size=[]
l_associativity=[]
for f in list_of_files:
  g = nx.read_graphml(f)
  
  l_size.append(g.size())
  l_associativity.append(nx.attribute_assortativity_coefficient(g, "student_fac"))

import seaborn
print("Mean Assortativity =",sum(l_associativity)/len(l_associativity))
plt.scatter(l_size,l_associativity,s=1,color=(0,0,1))
plt.title(' Student/Faculty Status')
plt.show()
seaborn.distplot(l_associativity)

#l_associativity_major = []
#graphs = []
#for i in range(len(list_of_files)):
#  graphs.append(nx.read_graphml(list_of_files[i]))
#  l_associativity_major.append(nx.attribute_assortativity_coefficient(graphs[i], "major"))
#print("Mean Assortativity =",sum(l_associativity_major)/len(l_associativity_major))
#plt.scatter(l_size,l_associativity_major,s=1,color=(0,0,1))
#plt. title('Major')
#plt.show()
#seaborn.distplot(l_associativity_major)

